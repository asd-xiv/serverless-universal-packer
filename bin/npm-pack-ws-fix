#!/usr/bin/env bash

set -e

display_help() {
  cat << EOF
Usage: $(basename "$0")

Workaround for npm's "pack" command not working within the context of a
workspace. https://github.com/npm/cli/issues/3466

Options:
  [-h, --help]  Print this help guide

Dependencies:
  npm
EOF
}

parse_arguments() {
  while :; do
    case $1 in
      -h|--help)
        display_help
        exit 0
      ;;

      # Standalone "--" terminates argument processing
      --) shift; break ;;

      # Argument not recognized
      -?*)
        echo "Error: Unknown argument $1" >&2
        exit 1
      ;;

      # anything else, considered as non-option argument
      *) break ;;
    esac
    shift
  done

  PKG_PATH="$(pwd)"
}

validate_input() {
  if [ ! -f "package.json" ]; then
    echo "Folder, \"$PKG_PATH\", does not contain a package.json file" >&2
    exit 1
  fi
}

# Print a message in bold text
bold() {
  echo -e "\033[1m$1\033[0m"
}

# Find the root folder path of the workspace by traversing up the directory
# tree until a package.json file with a "workspaces" property is found.
findWorkspaceRoot() {
  local path=$1

  if [ "${path}" = "/" ]; then
    return 1
  fi

  if [ -f "$path/package.json" ] && grep --quiet 'workspaces' < "$path/package.json" > /dev/null; then
    echo "${path}"
    return 0
  fi

  findWorkspaceRoot "$(realpath "$path/..")"
}

# Copy all node_modules from the Workspace context to the current package
# if they don't already exist in the destination directory.
# Only apply to production dependencies.
syncPackageWithWorkspace() {
  workspace_path="$1"
  pkg_path="$2"

  bold "Syncing modules from:"
  echo " - workspace: $workspace_path/node_modules"
  echo " - project: $pkg_path/node_modules"

  # List of destination project's production dependencies paths inside the
  # parent workspace node_modules folder.
  ws_modules_paths=$(\
    cd "$pkg_path" \
      && npm ls --parseable --omit dev --depth 0 --quiet --loglevel=error \
      | tail --lines +3
  )

  if [ -z "$ws_modules_paths" ]; then
    echo "No production dependencies found in the project" >&2
    return 1
  fi

  bold "Found production dependencies:"
  echo "$ws_modules_paths"

  for module_path in $ws_modules_paths; do
    echo " - $module_path"

    # In order to correctly copy namespaced packages, we need to recreate the
    # folder structure inside the destination node_modules folder.
    # For example `ws/node_modules/@namespace/package` should be copied to
    # `pkg/node_modules/@namespace/package`.
    local relative_path=$(echo "$module_path" \
      | sed "s|$workspace_path/node_modules/||"
    )
    local destination="$pkg_path/node_modules/$relative_path"

    mkdir -p "$destination"
    cp --recursive --force "$module_path"/* "$destination"
  done
}

backupNodeModules() {
  local pkg_path="$1"

  if [ -d "node_modules" ]; then
    bold "Backing up node_modules to:"
    echo " - $pkg_path/node_modules-bak"

    cp -rf "$pkg_path/node_modules" "$pkg_path/node_modules-bak"
    return 0
  fi
}

restoreNodeModules() {
  local pkg_path="$1"

  bold "Restoring node_modules to its original state:"

  if [ -L "$pkg_path/node_modules" ]; then
    echo " - removing node_modules symlink"
    rm "$pkg_path/node_modules"
    return 0
  fi

  if [ -d "$pkg_path/node_modules-bak" ]; then
    echo " - restoring backed-up node_modules"
    rm -rf "$pkg_path/node_modules"
    mv "$pkg_path/node_modules-bak" "$pkg_path/node_modules"
  fi
}

# Run "npm pack" in the workspace context by first symlinking or copying the
# the workspace's node_modules folder to the current package's node_modules.
pack() {
  local ws_path="$1"
  local pkg_path="$2"

  if [ -d "node_modules" ]; then
    syncPackageWithWorkspace "$ws_path" "$pkg_path"
  else
    ln -s "$ws_path/node_modules" "$pkg_path/node_modules"
  fi

  bold "Running \"npm pack\""
  npm pack --quiet --loglevel=error
}

##
## Main
##

parse_arguments "$@"
validate_input

bold "Preparing modules for npm project in:"
echo " - $PKG_PATH"

ws_path=$(findWorkspaceRoot "$PKG_PATH")

if [ -z "$ws_path" ]; then
  echo "Could not find any package.json file with a \"workspaces\" property" >&2
  exit 1
fi

bold "Found workspace root:"
echo " - $ws_path"

backupNodeModules "$PKG_PATH"
pack_result=$(pack "$ws_path" "$PKG_PATH" | tee /dev/tty)
tgz_path=$(echo "$pack_result" | tail -n 1)
restoreNodeModules "$PKG_PATH"

bold "Bundle file created:"
echo "$PKG_PATH/$tgz_path"
